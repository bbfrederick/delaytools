#!/usr/bin/env python
#
#   Copyright 2016 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
#       $Author: frederic $
#       $Date: 2016/07/06 15:25:36 $
#       $Id: filtnifti,v 1.9 2016/07/06 15:25:36 frederic Exp $
#

import rapidtide.filter as tide_filt
import rapidtide.io as tide_io
from rapidtide.RapidtideDataset import RapidtideDataset
import argparse
import numpy as np
import sys

def calcASL(lags, strengths, mask, tagoffset, bloodT1):
    offsets = lags + tagoffset
    calcmask = mask * np.where(offsets < 0.0, 0.0, 1.0)
    decay = np.exp(-offsets / bloodT1)
    return decay * strengths * calcmask, decay, calcmask, offsets


def main():
    # get the command line parameters
    parser = argparse.ArgumentParser(prog='pseudoASL',
                                     description='Use rapidtide output to predict ASL image.',
                                     usage='%(prog)s dataset outputfilename tagoffset bloodT1')
    parser.add_argument(
        'dataset',
        type=str,
        help='The name of the rapidtide dataset.')
    parser.add_argument(
        'outputfilename',
        type=str,
        help='The name of the output nifti file.')

    parser.add_argument(
        'tagoffset',
        type=float,
        help='The assumed time of tagging, relative to the peak of the lag histogram.')

    parser.add_argument(
        'bloodT1',
        type=float,
        help='The high passband frequency limit in Hz (set less than zero to disable LPF)')

    # get the command line parameters
    try:
        args = parser.parse_args()
    except SystemExit:
        parser.print_help()
        raise


    thedataset = RapidtideDataset('main', args.dataset, init_LUT=False)

    themask = thedataset.overlays['lagmask'].data
    thelags = thedataset.overlays['lagtimes'].data
    thestrengths = thedataset.overlays['lagstrengths'].data

    #theaslimage = calcASL(thelags, thestrengths, themask, args.tagoffset, args.bloodT1)

    print('bloodT1, tagoffset:', args.bloodT1, args.tagoffset)
    theaslimage, decay, calcmask, offsets = calcASL(thelags, thestrengths, themask, args.tagoffset, args.bloodT1)
    tide_io.savetonifti(theaslimage, thedataset.overlays['lagstrengths'].header, args.outputfilename + '_ASL')
    tide_io.savetonifti(decay, thedataset.overlays['lagstrengths'].header, args.outputfilename + '_decay')
    tide_io.savetonifti(calcmask, thedataset.overlays['lagstrengths'].header, args.outputfilename + '_calcmask')
    tide_io.savetonifti(offsets, thedataset.overlays['lagstrengths'].header, args.outputfilename + '_offsets')
    tide_io.savetonifti(themask, thedataset.overlays['lagstrengths'].header, args.outputfilename + '_lagmask')
    tide_io.savetonifti(thelags, thedataset.overlays['lagstrengths'].header, args.outputfilename + '_lagtimes')
    tide_io.savetonifti(thestrengths, thedataset.overlays['lagstrengths'].header, args.outputfilename + '_lagstrengths')

if __name__ == '__main__':
    main()
