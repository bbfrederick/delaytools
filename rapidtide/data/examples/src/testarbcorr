#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
import rapidtide.correlate as tide_corr
import rapidtide.io as tide_io
import rapidtide.workflows.parser_funcs as pf


def _get_parser():
    """
    Argument parser for showarbcorr
    """
    parser = argparse.ArgumentParser(
        prog="showarbcorr",
        description=("Calculate and display " "crosscorrelation between two " "timeseries."),
        usage="%(prog)s infile1 infile2 [options]",
    )

    # Required arguments
    pf.addreqtextfile(parser, "infilename1")
    pf.addreqtextfile(parser, "infilename2")

    # add optional arguments
    parser.add_argument(
        "--samplerate1",
        type=lambda x: pf.is_float(parser, x),
        help="Sample rate of timecourse 1, in Hz",
        default=None,
    )
    parser.add_argument(
        "--samplerate2",
        type=lambda x: pf.is_float(parser, x),
        help="Sample rate of timecourse 2, in Hz",
        default=None,
    )


def main():
    # try:
    #    args = _get_parser().parse_args()
    # except SystemExit:
    #    _get_parser().print_help()
    #    raise

    infilename1 = "timecourse1.txt"
    infilename2 = "timecourse1.txt"

    # for thefilespec in ["timecourse1.txt", "timecourse1.tsv", "timecourse2_physio.json"]:
    for thefilespec in [
        "sub-100307_task-rest_acq-1LR_physio.json:Cardiac",
        "sub-100307_text.txt:2",
        "timecourse1.tsv",
        "timecourse1.tsv:values",
        "sub-100307_plaintsv.tsv:Cardiac",
        "sub-100307_task-rest_acq-1LR_physio.json",
        "sub-100307_text.txt",
        "sub-100307_plaintsv.tsv",
    ]:
        print()
        dummy, dummy, dummy, dummy, dummy, dummy = tide_io.readvectorsfromtextfile(
            thefilespec, onecol=True, debug=True
        )

    Fs1, starttime1, dummy, input1, dummy, dummy = tide_io.readvectorsfromtextfile(infilename1)
    Fs2, starttime2, dummy, input2, dummy, dummy = tide_io.readvectorsfromtextfile(infilename2)
    Fs1 = 12.5
    Fs2 = 12.5

    thex, they, corrFs, dummy = tide_corr.arbcorr(
        input1[0, :], Fs1, input2[0, :], Fs2, start2=10.0, windowfunc="hamming"
    )
    plt.plot(thex, they)
    # plt.show()


if __name__ == "__main__":
    main()
